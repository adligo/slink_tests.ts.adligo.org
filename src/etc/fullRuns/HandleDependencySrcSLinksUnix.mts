/**
 * Copyright 2025 Adligo Inc / Scott Morgan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { I_AssertionContext, I_Test } from '../../../../i_tests4ts.ts.adligo.org/src/i_tests4ts.mjs';
import { ApiTrial } from '../../../../tests4ts.ts.adligo.org/src/trials.mjs';
import { Test, TestParams } from '../../../../tests4ts.ts.adligo.org/src/tests.mjs';
import { I_CliCtx, I_FsContext, SLinkRunner, Path, Paths } from '../../../../slink.ts.adligo.org/src/slink.mjs';
import { CliCtxMock, FsContextMock, CliCtxMockParams, FsContextMockParams, I_ExistsAbsResponse, I_ExistsResponse, I_ReadJsonResponse } from '../mocks/mocks.mjs';

export class HandleDependencySrcSLinksUnix extends ApiTrial {
  public static TESTS: I_Test[] = [
    new Test(TestParams.of('testHandleDependencySrcSLinks').ignore(), (ac: I_AssertionContext) => {

      ac.isTrue(false, "TODO this code was generated by AI and needs auditing");
      // Setup
      const ctxParams = new CliCtxMockParams();
      ctxParams._windows = false;
      const mockCtx = new CliCtxMock(ctxParams);
      let fsCtxParams = new FsContextMockParams();
      fsCtxParams._ac = ac;
      const mockFsCtx = new FsContextMock(fsCtxParams);

      // Setup mock package.json
      mockFsCtx.mockPackageJson = {
        dependencySrcSLinks: [{
          project: 'test-project'
        }]
      };

      // Create SLinkRunner with mocks
      const runner = new SLinkRunner(mockCtx as any);
      (runner as any).fsCtx = mockFsCtx;

      // Run the method directly
      (runner as any).handleDependencySrcSLinks([{
        project: 'test-project'
      }]);

      // Verify
      // TODO add more discrete assertions here
      ac.isTrue(mockFsCtx.getRmCalls() > 0, 'Should call rm to remove existing symlink');
      ac.isTrue(mockFsCtx.getSlinkCalls() > 0, 'Should call slink to create symlink');

      const slinkCall = mockFsCtx.getSlinkCall(0);
      ac.same('test-project@slink', slinkCall._slinkName, 'Should create symlink with correct name');

    })
  ];

  constructor() {
    super('org.adligo.ts.slink_tests.HandleDependencySrcSLinksUnix', HandleDependencySrcSLinksUnix.TESTS);
  }
}
